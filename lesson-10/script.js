// const obj = {
//   name: 'Object name',
//   email: 'object@email.com'
// }
//
// const obj1 = Object.create(obj);
// //console.log('name' in obj1);
// //Object.keys(obj1).forEach((key) => console.log(key));
// // for (const key in obj1) {
// //   console.log(key);
// // }
//
// const obj2 = Object.create(obj);
// obj2.description = 'I\'m object 2';
// // console.log(obj2.email);
//
// const obj3 = Object.create(obj2);
// console.log(obj3.description);
// console.log(obj3.name);
// console.log(obj3.email);

// class User {
//   #permissions;
//   static userDescriptions = {
//     Admin: 'You can view data!',
//     Owner: 'You can change data!',
//     Default: 'You can view and add data!'
//   };
//   static userCounter = 0;
//   constructor({ name, email, actions, desc }) {
//     this.name = name;
//     this.email = email;
//     this.#permissions = actions;
//     this.desc = desc;
//     User.userCounter += 1;
//   }
//   sayHi(){
//     return `Hello ${this.name}!`;
//   }
//
//   get permissions() {
//     if (this.#checkPermission('view')) {
//       return this.#permissions;
//     } else {
//       return 'You don\'t have access!';
//     }
//   }
//
//   set permissions(value) {
//     if (this.#checkPermission('edit')) {
//       this.#permissions = value;
//     } else {
//       return 'You don\'t have access!';
//     }
//   }
//
//   #checkPermission(permission) {
//     return this.#permissions.includes(permission);
//   }
// }
//console.log(User.userDescriptions.Owner);

// const user1 = new User({
//   name: 'User-1',
//   email: 'user-1@email.com',
//   actions: ['add', 'edit', 'view'],
//   desc: User.userDescriptions.Owner
// });
//
// console.log(user1);

//console.log(user1.sayHi());
//console.log(user1.permissions);
// user1.permissions = ['add', 'edit', 'remove', 'view'];
// console.log(user1.permissions);
// console.log(user1);
// console.log(User.userCounter);

// const user2 = new User({
//   name: 'User-2',
//   email: 'user-2@email.com',
//   actions: ['add', 'edit', 'view'],
//   desc: User.userDescriptions.Admin
// })
// console.log(User.userCounter);
// console.log(user2.permissions);


//const arr = [1, 2, 3];
//console.log(arr);

//console.log(obj);


// # –ú–æ–¥—É–ª—å 5. –ó–∞–Ω—è—Ç—Ç—è 10. –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏ —Ç–∞ –∫–ª–∞—Å–∏
//
// ## Example 1 - –ë–ª–æ–≥–µ—Ä
//
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `Blogger` –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:
//
// - `email` - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
// - `age` - –≤—ñ–∫, —á–∏—Å–ª–æ
// - `numberOfPosts` - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
// - `topics` - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä
//
// –ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

// class Blogger {
//   constructor({email, age, numberOfPosts, topics}) {
//     this.email = email;
//     this.age = age;
//     this.numberOfPosts = numberOfPosts;
//     this.topics = topics;
//   }
//
//   getInfo() {
//     return `User ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts`;
//   }
//
//   updatePostCount(value) {
//     this.numberOfPosts += value;
//   }
//
//   // get numberOfPosts() {
//   //   return this.#numberOfPosts;
//   // }
// }
//
// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ `getInfo()`, —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫:
//   `User ${–ø–æ—à—Ç–∞} is ${–≤—ñ–∫} years old and has ${–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤} posts`.
//
//     –î–æ–¥–∞–π –º–µ—Ç–æ–¥ `updatePostCount(value)`, —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ `value` –ø—Ä–∏–π–º–∞—î
// –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
//
// const mango = new Blogger({
//   email: 'mango@mail.com',
//   age: 24,
//   numberOfPosts: 20,
//   topics: ['tech', 'cooking'],
// });
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount(5);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts
//
// const poly = new Blogger({
//   email: 'poly@mail.com',
//   age: 19,
//   numberOfPosts: 17,
//   topics: ['sports', 'gaming', 'health'],
// });
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts
//
// ## Example 2 - –°—Ö–æ–≤–∏—â–µ
//
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `Storage` —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤.
// –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ
// –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `items`.
//
// class Storage {
//   constructor(productList) {
//     this.items = productList;
//   }
//
//   getItems() {
//     return this.items;
//   }
//
//   addItem(item) {
//     if (!this.items.includes(item)) {
//       this.items.push(item);
//     } else {
//       console.log('Product already exist!');
//     }
//   }
//
//   removeItem(item) {
//     if (this.items.includes(item)) {
//       const productIndex = this.items.indexOf(item);
//       this.items.splice(productIndex, 1);
//       // this.items.splice(this.items.indexOf(item), 1);
//       //!!~
//     } else {
//       console.log('Product not found!');
//     }
//   }
// }
//   –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:
//
//   - `getItems()` - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
// - `addItem(item)` - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// - `removeItem(item)` - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.
//
// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);
//
// const items = storage.getItems();
// console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]
//
// storage.addItem('üçå');
// console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]
// //
// storage.removeItem('üçã');
// console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]
//
// ## Example 3 - User
//
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `User` —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ `login` —Ç–∞ `email`.
// –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `#login` —Ç–∞ `#email`, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑
// –≥–µ—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä `login` —Ç–∞ `email`.
//
// class User {
//   #login;
//   #email;
//
//   constructor({login, email}) {
//     // some code
//   }
//
//   get email() {
//     //
//   }
//   set email() {
//     //
//   }
//
//   get login() {
//     //
//   }
//   set login() {
//     //
//   }
// }
// const mango = new User({
//   login: 'Mango',
//   email: 'mango@dog.woof',
// });
//
// console.log(mango.login); // Mango
// mango.login = 'Mangodoge';
// console.log(mango.login); // Mangodoge
//
// const poly = new User({
//   login: 'Poly',
//   email: 'poly@mail.com',
// });
//
// console.log(poly.login); // Poly
// poly.login = 'Polycutie';
// console.log(poly.login); // Polycutie
//
// ## Example 4 - –ù–æ—Ç–∞—Ç–∫–∏
//
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `Notes` —è–∫–∏–π –∫–µ—Ä—É—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `items`.
//   –ó–∞–º—ñ—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ `text` —Ç–∞ `priority`. –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É
// –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `Priority`, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
//
// class Notes {
//   static Priority = {
//     LOW: 'low',
//     NORMAL: 'normal',
//     HIGH: 'high'
//   };
//   constructor(noteData) {
//     this.items = noteData;
//   }
// }
//
// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ `addNote(note)`, `removeNote(text)` —Ç–∞
//   `updatePriority(text, newPriority)`.
//
// const myNotes = new Notes([]);
//
// myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.LOW });
// console.log(myNotes.items);
//
// myNotes.addNote({
//   text: '–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞',
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);
//
// myNotes.removeNote('–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞');
// console.log(myNotes.items);
//
// myNotes.updatePriority('–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes.items);
//
// ## Example 5 - Toggle
//
// –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å `Toggle` —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å `{isOpen: boolean}` —ñ
// –æ–≥–æ–ª–æ—à—É—î –æ–¥–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `on` - —Å—Ç–∞–Ω –≤–∫–ª/–≤–∏–∫–ª (true/false). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
// –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `on` –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ `false`.

// class Toggle {
//   on = false;
//
//   constructor(settingsObj) {
//     if (settingsObj) {
//       this.on = settingsObj.isOpen
//     }
//   }
// }
//
// const firstToggle = new Toggle({ isOpen: true });
// console.group('firstToggle');
// console.log(firstToggle.on);
// firstToggle.toggle();
// console.log(firstToggle.on);
// console.groupEnd('firstToggle');
//
// const secondToggle = new Toggle();
// console.group('secondToggle');
// console.log(secondToggle.on);
// secondToggle.toggle();
// console.log(secondToggle.on);
// console.groupEnd('secondToggle');
